@using TweakManagerBackend.Models
@using Microsoft.AspNetCore.Identity
@model IEnumerable<ApplicationUser>
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "User Management";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="page-header">
    <div class="d-flex justify-content-between align-items-center">
        <div>
            <h1 class="page-title">User Management</h1>
            <p class="page-subtitle">Manage users, roles, and permissions</p>
        </div>
        <div class="page-actions">
            <button class="btn btn-modern btn-primary-modern" onclick="inviteUser()">
                <i class="fas fa-user-plus"></i>
                Invite User
            </button>
        </div>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert-modern alert-success-modern">
        <i class="fas fa-check-circle me-2"></i>
        @TempData["SuccessMessage"]
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert-modern alert-danger-modern">
        <i class="fas fa-exclamation-circle me-2"></i>
        @TempData["ErrorMessage"]
    </div>
}

@if (TempData["InfoMessage"] != null)
{
    <div class="alert-modern alert-info-modern">
        <i class="fas fa-info-circle me-2"></i>
        @TempData["InfoMessage"]
    </div>
}

<!-- User Statistics -->
<div class="row mb-4">
    <div class="col-md-3">
        <div class="modern-card text-center">
            <div class="h3 text-primary mb-1">@Model.Count()</div>
            <div class="text-muted">Total Users</div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="modern-card text-center">
            <div class="h3 text-success mb-1">@Model.Count(u => u.EmailConfirmed)</div>
            <div class="text-muted">Verified Users</div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="modern-card text-center">
            <div class="h3 text-warning mb-1">@Model.Count(u => !u.EmailConfirmed)</div>
            <div class="text-muted">Pending Verification</div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="modern-card text-center">
            <div class="h3 text-info mb-1">2</div>
            <div class="text-muted">Admin Users</div>
        </div>
    </div>
</div>

<!-- Filters and Search -->
<div class="modern-card mb-4">
    <div class="row g-3">
        <div class="col-md-4">
            <label for="userSearchInput" class="form-label">Search Users</label>
            <div class="input-group">
                <span class="input-group-text"><i class="fas fa-search"></i></span>
                <input type="text" class="form-control" id="userSearchInput" placeholder="Search by username, email, or ID...">
            </div>
        </div>
        <div class="col-md-2">
            <label for="roleFilter" class="form-label">Role</label>
            <select class="form-select" id="roleFilter">
                <option value="">All Roles</option>
                <option value="admin">Admin</option>
                <option value="user">User</option>
            </select>
        </div>
        <div class="col-md-2">
            <label for="statusFilter" class="form-label">Status</label>
            <select class="form-select" id="statusFilter">
                <option value="">All Status</option>
                <option value="verified">Verified</option>
                <option value="pending">Pending</option>
                <option value="locked">Locked</option>
            </select>
        </div>
        <div class="col-md-2">
            <label for="sortUsers" class="form-label">Sort By</label>
            <select class="form-select" id="sortUsers">
                <option value="name">Name</option>
                <option value="email">Email</option>
                <option value="date">Registration Date</option>
                <option value="lastlogin">Last Login</option>
            </select>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <button class="btn btn-outline-secondary w-100" onclick="clearUserFilters()">
                <i class="fas fa-times"></i>
                Clear Filters
            </button>
        </div>
    </div>
</div>

<!-- Users Table -->
<div class="modern-table">
    <table class="table table-hover mb-0" id="usersTable">
        <thead>
            <tr>
                <th>User</th>
                <th>Email</th>
                <th>Role</th>
                <th>Status</th>
                <th>Registration</th>
                <th>Last Login</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model)
            {
                var roles = await UserManager.GetRolesAsync(user);
                var isAdmin = roles.Contains("Admin");
                var isVerified = user.EmailConfirmed;
                
                <tr data-user-id="@user.Id" 
                    data-username="@user.UserName.ToLower()" 
                    data-email="@user.Email.ToLower()" 
                    data-role="@(isAdmin ? "admin" : "user")"
                    data-status="@(isVerified ? "verified" : "pending")"
                    data-date="@user.LockoutEnd?.ToString("yyyy-MM-dd")">
                    <td>
                        <div class="d-flex align-items-center">
                            <div class="avatar-sm bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3">
                                @(user.UserName?.Substring(0, 1).ToUpper() ?? "?")
                            </div>
                            <div>
                                <div class="fw-bold">@user.UserName</div>
                                <small class="text-muted">ID: @user.Id.Substring(0, 8)...</small>
                            </div>
                        </div>
                    </td>
                    <td>
                        <div>@user.Email</div>
                        @if (!string.IsNullOrEmpty(user.PhoneNumber))
                        {
                            <small class="text-muted">@user.PhoneNumber</small>
                        }
                    </td>
                    <td>
                        @if (isAdmin)
                        {
                            <span class="badge bg-danger">
                                <i class="fas fa-crown me-1"></i>
                                Admin
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-secondary">
                                <i class="fas fa-user me-1"></i>
                                User
                            </span>
                        }
                    </td>
                    <td>
                        @if (isVerified)
                        {
                            <span class="badge bg-success">
                                <i class="fas fa-check-circle me-1"></i>
                                Verified
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-warning">
                                <i class="fas fa-clock me-1"></i>
                                Pending
                            </span>
                        }
                    </td>
                    <td>
                        <div>@user.LockoutEnd?.ToString("MMM dd, yyyy")</div>
                        <small class="text-muted">@user.LockoutEnd?.ToString("HH:mm")</small>
                    </td>
                    <td>
                        <div>Never</div>
                        <small class="text-muted">-</small>
                    </td>
                    <td>
                        <div class="btn-group btn-group-sm">
                            <button class="btn btn-outline-info" onclick="viewUserDetails('@user.Id')" title="View details">
                                <i class="fas fa-eye"></i>
                            </button>
                            @if (!isAdmin)
                            {
                                <form asp-action="InitiateAdminPromotion" method="post" class="d-inline">
                                    <input type="hidden" name="userId" value="@user.Id" />
                                    <button type="submit" class="btn btn-outline-primary" title="Promote to admin" onclick="return confirm('Are you sure you want to promote this user to Admin?')">
                                        <i class="fas fa-user-plus"></i>
                                    </button>
                                </form>
                            }
                            <button class="btn btn-outline-warning" onclick="resetPassword('@user.Id')" title="Reset password">
                                <i class="fas fa-key"></i>
                            </button>
                            <button class="btn btn-outline-danger" onclick="deleteUser('@user.Id')" title="Delete user">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- User Details Modal -->
<div class="modal fade" id="userDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">User Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="userDetailsContent">
                <!-- Content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="editUser()">Edit User</button>
            </div>
        </div>
    </div>
</div>

<!-- Invite User Modal -->
<div class="modal fade" id="inviteUserModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Invite New User</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="inviteUserForm">
                    <div class="mb-3">
                        <label for="inviteEmail" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="inviteEmail" required>
                    </div>
                    <div class="mb-3">
                        <label for="inviteRole" class="form-label">Role</label>
                        <select class="form-select" id="inviteRole">
                            <option value="user">User</option>
                            <option value="admin">Admin</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="inviteMessage" class="form-label">Personal Message (Optional)</label>
                        <textarea class="form-control" id="inviteMessage" rows="3" placeholder="Add a personal message to the invitation..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="sendInvitation()">
                    <i class="fas fa-paper-plane"></i>
                    Send Invitation
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let allUsers = [];
        let filteredUsers = [];
        
        document.addEventListener('DOMContentLoaded', function() {
            initializeUsersTable();
            
            // Setup event listeners
            document.getElementById('userSearchInput').addEventListener('input', filterUsers);
            document.getElementById('roleFilter').addEventListener('change', filterUsers);
            document.getElementById('statusFilter').addEventListener('change', filterUsers);
            document.getElementById('sortUsers').addEventListener('change', sortUsers);
        });
        
        function initializeUsersTable() {
            const rows = document.querySelectorAll('#usersTable tbody tr');
            allUsers = Array.from(rows).map(row => ({
                element: row,
                id: row.dataset.userId,
                username: row.dataset.username,
                email: row.dataset.email,
                role: row.dataset.role,
                status: row.dataset.status,
                date: row.dataset.date
            }));
            filteredUsers = [...allUsers];
        }
        
        function filterUsers() {
            const searchTerm = document.getElementById('userSearchInput').value.toLowerCase();
            const roleFilter = document.getElementById('roleFilter').value;
            const statusFilter = document.getElementById('statusFilter').value;
            
            filteredUsers = allUsers.filter(user => {
                const matchesSearch = !searchTerm || 
                    user.username.includes(searchTerm) ||
                    user.email.includes(searchTerm) ||
                    user.id.includes(searchTerm);
                
                const matchesRole = !roleFilter || user.role === roleFilter;
                const matchesStatus = !statusFilter || user.status === statusFilter;
                
                return matchesSearch && matchesRole && matchesStatus;
            });
            
            updateUsersTable();
        }
        
        function sortUsers() {
            const sortBy = document.getElementById('sortUsers').value;
            
            filteredUsers.sort((a, b) => {
                switch(sortBy) {
                    case 'name':
                        return a.username.localeCompare(b.username);
                    case 'email':
                        return a.email.localeCompare(b.email);
                    case 'date':
                        return new Date(b.date) - new Date(a.date);
                    case 'lastlogin':
                        // Implement last login sorting when data is available
                        return 0;
                    default:
                        return 0;
                }
            });
            
            updateUsersTable();
        }
        
        function updateUsersTable() {
            const tbody = document.querySelector('#usersTable tbody');
            tbody.innerHTML = '';
            
            filteredUsers.forEach(user => {
                tbody.appendChild(user.element);
            });
        }
        
        function clearUserFilters() {
            document.getElementById('userSearchInput').value = '';
            document.getElementById('roleFilter').value = '';
            document.getElementById('statusFilter').value = '';
            document.getElementById('sortUsers').value = 'name';
            filterUsers();
        }
        
        function viewUserDetails(userId) {
            const modal = new bootstrap.Modal(document.getElementById('userDetailsModal'));
            document.getElementById('userDetailsContent').innerHTML = `
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            `;
            modal.show();
            
            // Simulate loading user details
            setTimeout(() => {
                document.getElementById('userDetailsContent').innerHTML = `
                    <div class="row">
                        <div class="col-md-6">
                            <h6>User Information</h6>
                            <p><strong>Username:</strong> john.doe</p>
                            <p><strong>Email:</strong> john.doe@example.com</p>
                            <p><strong>Phone:</strong> +1 (555) 123-4567</p>
                            <p><strong>Role:</strong> <span class="badge bg-secondary">User</span></p>
                        </div>
                        <div class="col-md-6">
                            <h6>Account Status</h6>
                            <p><strong>Status:</strong> <span class="badge bg-success">Verified</span></p>
                            <p><strong>Registered:</strong> January 15, 2024</p>
                            <p><strong>Last Login:</strong> 2 hours ago</p>
                            <p><strong>Hardware ID:</strong> HW-12345-ABCD</p>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-12">
                            <h6>License Keys</h6>
                            <div class="table-responsive">
                                <table class="table table-sm">
                                    <thead>
                                        <tr>
                                            <th>Key</th>
                                            <th>Status</th>
                                            <th>Created</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td><code>PabloDEV-ABC123...</code></td>
                                            <td><span class="badge bg-success">Active</span></td>
                                            <td>Jan 15, 2024</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                `;
            }, 1000);
        }
        
        function inviteUser() {
            const modal = new bootstrap.Modal(document.getElementById('inviteUserModal'));
            modal.show();
        }
        
        function sendInvitation() {
            const email = document.getElementById('inviteEmail').value;
            const role = document.getElementById('inviteRole').value;
            const message = document.getElementById('inviteMessage').value;
            
            if (!email) {
                showNotification('Please enter an email address', 'warning');
                return;
            }
            
            // Simulate sending invitation
            showNotification(`Invitation sent to ${email}`, 'success');
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('inviteUserModal'));
            modal.hide();
            
            // Reset form
            document.getElementById('inviteUserForm').reset();
        }
        
        function resetPassword(userId) {
            if (confirm('Are you sure you want to reset this user\'s password? They will receive an email with instructions.')) {
                // Implement password reset
                showNotification('Password reset email sent successfully', 'success');
            }
        }
        
        function deleteUser(userId) {
            if (confirm('Are you sure you want to delete this user? This action cannot be undone.')) {
                // Implement user deletion
                showNotification('User deleted successfully', 'success');
            }
        }
        
        function editUser() {
            showNotification('Edit functionality coming soon', 'info');
        }
    </script>
}